/*
Циклическая ротация

Массив A состоит из N целых чисел.
Ротация массива - это сдвиг каждого элемента вправо, все элементы с конца двигаются в начало. Например, ротация массива
A = [3, 8, 9, 7, 6] это [6, 3, 8, 9, 7] (все элементы сдвинуты вправо на 1 элемент и 6 сдвигается на первое место).
Цель - это сдвинуть массив A К раз.

Необходимо написать функцию:

func Solution(A []int, K int) []int

К примеру для параметров

    A = [3, 8, 9, 7, 6]
    K = 3

функция должна вернуть [9, 7, 6, 3, 8]. Необходимо сделать 3 ротации:

    [3, 8, 9, 7, 6] -> [6, 3, 8, 9, 7]
    [6, 3, 8, 9, 7] -> [7, 6, 3, 8, 9]
    [7, 6, 3, 8, 9] -> [9, 7, 6, 3, 8]

Другой пример:

    A = [1, 2, 3, 4]
    K = 4

результат [1, 2, 3, 4]

Условия:

N и K целые числа в диапазоне [0..100];
каждый элемент массива A целые числа в диапазоне [−1,000..1,000].
*/

package main

import "fmt"

func main() {

	var mock []int = []int{3, 8, 9, 7, 6}

	fmt.Println(Solution(mock, 3))
}

func Solution(A []int, K int) []int {

	if K <= 0 || len(A) == K {
		return A
	}

	shiftIndex := K - 1

	if len(A) < K {
		if K%len(A) == 0 {
			shiftIndex = len(A) - 1
		} else {
			shiftIndex = K%len(A) - 1
		}
	}

	sliceResult := A[shiftIndex:]

	return append(sliceResult, A[:shiftIndex]...)
}
